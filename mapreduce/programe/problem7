
7) Create a bar graph to depict the number of applications for each year [All]
Technology Used: Map reduce
total_app.java.


import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


public class total_app {
	public static class MapClass extends Mapper<LongWritable,Text,Text,Text>
	{
		public void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException
		{
			try{
			String[] str = value.toString().split("\t");
             String year = str[7];
             String sr_no= str[0];
            context.write(new Text(year),new Text(sr_no));
			}
			catch(Exception e) {
	            System.out.println(e.getMessage());
	         }
		}
	}
		
		  public static class ReduceClass extends Reducer<Text,Text,Text,LongWritable>
		   {
			    
			    public void reduce(Text key, Iterable<Text> values,Context context) throws IOException, InterruptedException {
			 
			    	long count=0;
			    	 for ( Text V:values)
			         {   
			      
			        	count++;
			 
			         }
			 
context.write(key,new LongWritable(count));
		   }
		   }
public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    //conf.set("name", "value")
    //conf.set("mapreduce.input.fileinputformat.split.minsize", "134217728");
    Job job = new Job (conf, "Count");
    job.setJarByClass(total_app.class);
    job.setMapperClass(MapClass.class);
    //job.setCombinerClass(ReduceClass.class);
    job.setReducerClass(ReduceClass.class);
    //job.setNumReduceTasks(2);
  job.setMapOutputKeyClass(Text.class);
   job.setMapOutputValueClass(Text.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(LongWritable.class);
    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}


